<html>
	<head>
		<style>
			body { margin: 0; }
			canvas { width: 100%; height: 100% }
		</style>
	</head>
	<body>
		<script src="three.min.js"></script>
		<script src="ThreeCSG.js"></script>
		<script>
			// Задача: конструирайте ... зарче, от дупките
			// на което струи светлина

			var renderer = new THREE.WebGLRenderer();
			renderer.setSize( window.innerWidth, window.innerHeight );
			document.body.appendChild( renderer.domElement );

			renderer.shadowMap.enabled = true;
			renderer.shadowMap.type = THREE.PCFSoftShadowMap;

			var scene = new THREE.Scene();
			
			var camera = new THREE.PerspectiveCamera( 30, window.innerWidth/window.innerHeight, 0.1, 1000 );
			camera.position.set(0,10,30);
			camera.lookAt(new THREE.Vector3(0,-2,0));

			var cube = new THREE.Mesh(
				new THREE.BoxGeometry( 1, 1, 1 ),
				new THREE.MeshLambertMaterial()
			);
                        var inner = new THREE.Mesh(
				new THREE.BoxGeometry( 0.9, 0.9, 0.9 ),
				new THREE.MeshLambertMaterial()
			);
			
                        cube = new ThreeBSP(cube) . subtract(new ThreeBSP(inner));

                        var geometry = new THREE.CylinderGeometry( 1/10, 1/10, 0.2,30,1);
                        var hole = new THREE.Mesh(geometry,new THREE.MeshBasicMaterial());
                        hole.geometry.openEnded = true;
                        hole.position.set(0,0.5,0);
                        cube = cube.subtract(new ThreeBSP(hole));
                        
                        var N = 3 , M = 2;
                        for(var i = 1;i<=N;i++)
                        for(var j = 1;j<=M;j++)
                          {
                        
                          hole.position.set(i/(N + 1) -0.5 ,-0.5,j/(M + 1) - 0.5);
                          cube = cube.subtract(new ThreeBSP(hole));
                          }

                        N = 3; M = 1;
                        for(var i = 1;i<=N;i++)
                        for(var j = 1;j<=M;j++)
                          {
                          
                          hole.position.set(-0.5,i/(N + 1) -0.5 ,j/(M + 1) - 0.5);
                          hole.rotation.z = Math.PI/2;
                          cube = cube.subtract(new ThreeBSP(hole));
                          }

                        N = 2; M = 2;
                        for(var i = 1;i<=N;i++)
                        for(var j = 1;j<=M;j++)
                          {
                         
                          hole.position.set(0.5,i/(N + 1) -0.5 ,j/(M + 1) - 0.5);
                          hole.rotation.z = Math.PI/2;
                          cube = cube.subtract(new ThreeBSP(hole));
                          }

                        N = 2 ; M = 1;
                        for(var i = 1;i<=N;i++)
                        for(var j = 1;j<=M;j++)
                          {
                         
                          hole.position.set(i/(N + 1) -0.5 ,j/(M + 1) - 0.5,0.5);
                          hole.rotation.y = Math.PI/2;
                          cube = cube.subtract(new ThreeBSP(hole));
                          }

                        N = 3; M = 3;
                        for(var i = 1;i<=N;i++)
                        for(var j = 1;j<=M;j++)
                          {
                          if((i + j)%2 == 1) continue;
                          hole.position.set(i/(N + 1) -0.5 ,j/(M + 1) - 0.5,-0.5);
                          hole.rotation.y = Math.PI/2;
                          cube = cube.subtract(new ThreeBSP(hole));
                          }
                         
                        cube = cube.toMesh(new THREE.MeshLambertMaterial({color:'oldlace'}));
                        cube.castShadow = true;
              
                        scene.add(cube);
                        cube.scale.x = 4;
                        cube.scale.y = 4;
                        cube.scale.z = 4;

                        // широка платформа, която ще бъде осветявана
			var geometry = new THREE.BoxGeometry( 100, 1, 100);
			var material = new THREE.MeshPhongMaterial();
			platform = new THREE.Mesh( geometry, material );
			platform.position.set( 0,-5,0 );
			platform.receiveShadow = true;
			scene.add( platform );
          

			// светлина вътре в куба, свети надолу през
			// дупките на зарчето - ама трябва вие да си
			// я сложите на подходящо място
			light1 = new THREE.SpotLight('white');
			light1.position.set(0,1,0);
			light1.target = platform;
			light1.angle = 1.3; // полуъгъл на светлинния конус
			light1.penumbra = 1; // мекост на контура на светлинния конус
			light1.castShadow = true; // тази светлина генерира сянка
			scene.add(light1);
			
			// втора слаба светлина, която прави жълтото
			// петно на платформата
			light2 = new THREE.SpotLight('yellow',0.5); // интензитет 0.5
			light2.position.set(0,0.1,0);
			light2.angle = 1.3;
			light2.penumbra = 1;
			scene.add(light2);
			
			// трета светлина - отгоре много слаба бяла,
			// а отдолу по-силна керемидена - нужна ни е,
			// за да видим външните стени на зарчето
			light3 = new THREE.HemisphereLight(0x202020,0xA04040);
			scene.add(light3);

			function drawFrame()
			{
				requestAnimationFrame( drawFrame );
				
				// въртим зарчето
				cube.rotation.x += 0.015;
				cube.rotation.y += 0.010;
				cube.rotation.z += 0.005;
		
				renderer.render( scene, camera );
			}
			drawFrame();
		</script>
	</body>
</html>
